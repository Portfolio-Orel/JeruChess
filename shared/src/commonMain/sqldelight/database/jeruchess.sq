CREATE TABLE  userEntity(
    id TEXT NOT NULL PRIMARY KEY,
    firstName TEXT NOT NULL,
    lastName TEXT NOT NULL,
    gender TEXT NOT NULL DEFAULT 'MALE',
    email TEXT NOT NULL,
    phoneNumber TEXT NOT NULL,
    playerNumber TEXT NOT NULL,
    dateOfBirth INTEGER NOT NULL,
    token TEXT
);

CREATE TABLE eventEntity(
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    date INTEGER NOT NULL,
    price INTEGER NOT NULL,
    currency TEXT NOT NULL,
    roundNumber INTEGER NOT NULL,
    eventType TEXT NOT NULL,
    eventFormat TEXT NOT NULL,
    isRatingIsrael INTEGER NOT NULL,
    isRatingFide INTEGER NOT NULL,
    ratingType TEXT NOT NULL,
    gameId TEXT NOT NULL,
    FOREIGN KEY(gameId) REFERENCES gameEntity(id)
);

CREATE TABLE chessUserDataEntity(
    userId TEXT NOT NULL PRIMARY KEY,
    rating INTEGER NOT NULL,
    isProfileActive INTEGER NOT NULL,
    FOREIGN KEY(userId) REFERENCES userEntity(id)
);

CREATE TABLE eventParticipantEntity(
    eventId TEXT NOT NULL,
    userId TEXT NOT NULL,
    isPaid INTEGER NOT NULL,
    paidAt INTEGER,
    paidAmount INTEGER,
    paymentType TEXT,
    isActive INTEGER NOT NULL,
    FOREIGN KEY(eventId) REFERENCES eventEntity(id),
    FOREIGN KEY(userId) REFERENCES userEntity(id)
);

CREATE TABLE clubDataEntity(
    address TEXT NOT NULL PRIMARY KEY,
    phone TEXT,
    email TEXT,
    website TEXT,
    facebook TEXT,
    instagram TEXT,
    twitter TEXT
);

CREATE TABLE gameEntity(
    id TEXT NOT NULL PRIMARY KEY,
    timeStartMin INTEGER NOT NULL,
    incrementBeforeTimeControl INTEGER NOT NULL,
    movesNumToTimeControl INTEGER,
    timeBumpAfterTimeControl INTEGER,
    incrementAfterTimeControl INTEGER,
    type TEXT NOT NULL
);

-- Club --
getClub:
SELECT *
FROM clubDataEntity;

insertClub:
INSERT OR REPLACE
 INTO clubDataEntity (
    address,
    phone,
    email,
    website,
    facebook,
    instagram,
    twitter
) VALUES (?, ?, ?, ?, ?, ?, ?);

-- Users --
getUser:
SELECT *
FROM userEntity;

insertUser:
INSERT OR REPLACE
 INTO userEntity (
    id,
    firstName,
    lastName,
    gender,
    email,
    phoneNumber,
    playerNumber,
    dateOfBirth,
    token
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

deleteUser:
DELETE FROM userEntity;

-- Club --
deleteClub:
DELETE FROM clubDataEntity
WHERE address = ?;

updateClub:
UPDATE clubDataEntity
SET address = ?,
    phone = ?,
    email = ?,
    website = ?,
    facebook = ?,
    instagram = ?,
    twitter = ?;
-- Club --

-- Events --
getEvents:
SELECT *
FROM eventEntity;

insertEvent:
INSERT OR REPLACE
 INTO eventEntity (
    id,
    name,
    description,
    date,
    price,
    currency,
    roundNumber,
    eventType,
    eventFormat,
    isRatingIsrael,
    isRatingFide,
    ratingType,
    gameId
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

deleteEvent:
DELETE FROM eventEntity
WHERE id = ?;

updateEvent:
UPDATE eventEntity
SET name = ?,
    description = ?,
    date = ?,
    price = ?,
    currency = ?,
    roundNumber = ?,
    eventType = ?,
    eventFormat = ?,
    isRatingIsrael = ?,
    isRatingFide = ?
WHERE id = ?;
-- Events --

-- EventParticipants --
getEventParticipants:
SELECT *
FROM eventParticipantEntity
WHERE eventId = ?;

insertEventParticipant:
INSERT OR REPLACE
 INTO eventParticipantEntity (
    eventId,
    userId,
    isPaid,
    paidAt,
    paidAmount,
    paymentType,
    isActive
) VALUES (?, ?, ?, ?, ?, ?, ?);

deleteEventParticipant:
DELETE FROM eventParticipantEntity
WHERE eventId = ? AND userId = ?;

updateEventParticipant:
UPDATE eventParticipantEntity
SET eventId = ?,
    userId = ?;
-- EventParticipants --

-- ChessUserData --
getChessUserData:
SELECT *
FROM chessUserDataEntity;

insertChessUserData:
INSERT OR REPLACE
 INTO chessUserDataEntity (
    userId,
    rating,
    isProfileActive
) VALUES (?, ?, ?);

deleteChessUserData:
DELETE FROM chessUserDataEntity
WHERE userId = ?;

updateChessUserData:
UPDATE chessUserDataEntity
SET rating = ?,
    isProfileActive = ?
WHERE userId = ?;
-- ChessUserData --



